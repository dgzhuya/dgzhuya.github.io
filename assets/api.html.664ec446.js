import{_ as n,o as s,c as a,a as t}from"./app.0104bf31.js";const p={},e=t(`<h1 id="wink-admin-api" tabindex="-1"><a class="header-anchor" href="#wink-admin-api" aria-hidden="true">#</a> wink-admin-api</h1><blockquote><p>\u662F\u4E00\u4E2Anestjs\u5F00\u53D1\u7684\u540E\u53F0\u7BA1\u7406\u7CFB\u7EDF</p></blockquote><h2 id="\u6570\u636E\u5E93" tabindex="-1"><a class="header-anchor" href="#\u6570\u636E\u5E93" aria-hidden="true">#</a> \u6570\u636E\u5E93</h2><ol><li>\u6570\u636E\u5E93\u4F7F\u7528SQLite\uFF0C\u4E3B\u76EE\u5F55\u4E0B\u4F7F\u7528admin.db\u6587\u4EF6\u4F5C\u4E3A\u6570\u636E\u5E93\u6587\u4EF6<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 		type<span class="token operator">:</span> <span class="token string">&#39;sqlite&#39;</span><span class="token punctuation">,</span>
 		database<span class="token operator">:</span> <span class="token string">&#39;admin.db&#39;</span><span class="token punctuation">,</span>
 		autoLoadEntities<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
 		synchronize<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>\u5305\u542B\u9ED8\u8BA4\u6570\u636E\u7684\u6570\u636E\u5E93\u6587\u4EF6\uFF0C\u70B9\u51FB<a href="/admin.db">\u4E0B\u8F7D</a></li></ol><h2 id="orm\u8BBE\u7F6E" tabindex="-1"><a class="header-anchor" href="#orm\u8BBE\u7F6E" aria-hidden="true">#</a> ORM\u8BBE\u7F6E</h2><p>\u4F7F\u7528TypeORM\u4F5C\u4E3A\u6570\u636E\u67E5\u8BE2\u5DE5\u5177</p><h2 id="\u8BF7\u6C42\u53C2\u6570" tabindex="-1"><a class="header-anchor" href="#\u8BF7\u6C42\u53C2\u6570" aria-hidden="true">#</a> \u8BF7\u6C42\u53C2\u6570</h2><ol><li><p>\u8BF7\u6C42\u53C2\u6570\u62E6\u622A\uFF0C\u521B\u5EFAValidationPipe\u7BA1\u9053\u62E6\u622A\u8BF7\u6C42\u4FE1\u606F</p><p><strong>\u793A\u4F8B\u4EE3\u7801</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code> <span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ValidationPipe</span> <span class="token keyword">implements</span> <span class="token class-name">PipeTransform</span> <span class="token punctuation">{</span>
 	<span class="token keyword">async</span> <span class="token function">transform</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> metatype <span class="token punctuation">}</span><span class="token operator">:</span> ArgumentMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>metatype <span class="token operator">||</span> ValidationPipe<span class="token punctuation">.</span><span class="token function">toValidate</span><span class="token punctuation">(</span>metatype<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 			<span class="token keyword">return</span> value
 		<span class="token punctuation">}</span>
 		<span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token function">plainToInstance</span><span class="token punctuation">(</span>metatype<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
 		<span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">validate</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span>
 		<span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span>ValidationPipe<span class="token punctuation">.</span><span class="token function">getErrorMessage</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>
 		<span class="token punctuation">}</span>
 		<span class="token keyword">return</span> value
 	<span class="token punctuation">}</span>

 	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token function">getErrorMessage</span><span class="token punctuation">(</span>error<span class="token operator">:</span> ValidationError<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
 		<span class="token keyword">return</span> error<span class="token punctuation">.</span>constraints<span class="token punctuation">[</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>constraints<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
 	<span class="token punctuation">}</span>

 	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token function">toValidate</span><span class="token punctuation">(</span>metatype<span class="token operator">:</span> Type<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
 		<span class="token keyword">const</span> types<span class="token operator">:</span> Type<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Boolean<span class="token punctuation">,</span> Number<span class="token punctuation">,</span> <span class="token builtin">Array</span><span class="token punctuation">,</span> Object<span class="token punctuation">]</span>
 		<span class="token keyword">return</span> types<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>metatype<span class="token punctuation">)</span>
 	<span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u8BF7\u6C42\u53C2\u6570\u6821\u9A8C\uFF0C\u914D\u7F6EDTO\u7684\u53C2\u6570\u9A8C\u8BC1\u6761\u4EF6\uFF0C\u4F7F\u7528class-transformer\u4F5C\u4E3A\u53C2\u6570\u6821\u9A8C\u5DE5\u5177</p><p><strong>\u793A\u4F8B\u4EE3\u7801(PageDto\u4E3A\u4F8B)</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code> <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PageDto</span> <span class="token punctuation">{</span>
 	<span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;\u9875\u6570\u4E0D\u80FD\u4E3A\u7A7A&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
 	<span class="token decorator"><span class="token at operator">@</span><span class="token function">Matches</span></span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\d*)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;\u9875\u7801\u4E0D\u662F\u6570\u5B57&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
 	<span class="token keyword">readonly</span> page<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>

 	<span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;\u67E5\u8BE2\u6570\u91CF\u4E0D\u80FD\u4E3A\u7A7A&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
 	<span class="token decorator"><span class="token at operator">@</span><span class="token function">Matches</span></span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\d*)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;\u6761\u76EE\u6570\u4E0D\u662F\u6570\u5B57&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
 	<span class="token keyword">readonly</span> count<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>

 	<span class="token decorator"><span class="token at operator">@</span><span class="token function">IsOptional</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 	<span class="token decorator"><span class="token at operator">@</span><span class="token function">MaxLength</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;\u641C\u7D22\u5173\u952E\u5B57\u592A\u957F&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
 	<span class="token keyword">readonly</span> search<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>

 	<span class="token keyword">static</span> <span class="token function">setSkipTake</span><span class="token punctuation">(</span>pageDto<span class="token operator">:</span> PageDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 		<span class="token keyword">const</span> take <span class="token operator">=</span> pageDto<span class="token punctuation">.</span>count <span class="token operator">?</span> <span class="token operator">+</span>pageDto<span class="token punctuation">.</span>count <span class="token operator">:</span> <span class="token number">5</span>
 		<span class="token keyword">const</span> skip <span class="token operator">=</span> pageDto<span class="token punctuation">.</span>page <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">+</span>pageDto<span class="token punctuation">.</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> take <span class="token operator">:</span> <span class="token number">0</span>
 		<span class="token keyword">return</span> <span class="token punctuation">{</span>
 			take<span class="token punctuation">,</span>
 			skip
 		<span class="token punctuation">}</span>
 	<span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u9519\u8BEF\u4FE1\u606F\u8FD4\u56DE\uFF0C\u53C2\u6570\u9A8C\u8BC1\u9519\u8BEF\u540E\uFF0C\u629B\u51FABadRequestException\u5F02\u5E38\uFF0C\u901A\u8FC7\u5168\u5C40\u9519\u8BEF\u62E6\u622A\u8FD4\u56DE\u9519\u8BEF\u4FE1\u606F</p></li></ol><h2 id="\u8FD4\u56DE\u6570\u636E" tabindex="-1"><a class="header-anchor" href="#\u8FD4\u56DE\u6570\u636E" aria-hidden="true">#</a> \u8FD4\u56DE\u6570\u636E</h2><p>\u521B\u5EFATransformInterceptor\u4F5C\u4E3A\u8BF7\u6C42\u7ED3\u679C\u8FD4\u56DE\u5DE5\u5177 <strong>\u793A\u4F8B\u4EE3\u7801</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TransformInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">NestInterceptor</span> <span class="token punctuation">{</span>
	<span class="token function">intercept</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ExecutionContext<span class="token punctuation">,</span> next<span class="token operator">:</span> CallHandler<span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> next<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
			<span class="token function">map</span><span class="token punctuation">(</span>data <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
				code<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
				data<span class="token punctuation">,</span>
				msg<span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u9519\u8BEF\u62E6\u622A" tabindex="-1"><a class="header-anchor" href="#\u9519\u8BEF\u62E6\u622A" aria-hidden="true">#</a> \u9519\u8BEF\u62E6\u622A</h2><ol><li><p>HTTP\u5F02\u5E38\u62E6\u622A</p><p><strong>\u793A\u4F8B\u4EE3\u7801</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code> <span class="token decorator"><span class="token at operator">@</span><span class="token function">Catch</span></span><span class="token punctuation">(</span>HttpException<span class="token punctuation">)</span>
 <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HttpExceptionFilter</span> <span class="token keyword">implements</span> <span class="token class-name">ExceptionFilter</span> <span class="token punctuation">{</span>
 	<span class="token function">catch</span><span class="token punctuation">(</span>exception<span class="token operator">:</span> HttpException<span class="token punctuation">,</span> host<span class="token operator">:</span> ArgumentsHost<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 		<span class="token keyword">const</span> ctx <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">switchToHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 		<span class="token keyword">const</span> response <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">getResponse</span><span class="token generic class-name"><span class="token operator">&lt;</span>Response<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 		<span class="token keyword">const</span> status <span class="token operator">=</span> exception<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 		response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 			code<span class="token operator">:</span> status<span class="token punctuation">,</span>
 			msg<span class="token operator">:</span> exception<span class="token punctuation">.</span>message
 		<span class="token punctuation">}</span><span class="token punctuation">)</span>
 	<span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u5176\u4ED6\u5F02\u5E38\u62E6\u622A</p><p><strong>\u793A\u4F8B\u4EE3\u7801</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code> <span class="token decorator"><span class="token at operator">@</span><span class="token function">Catch</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ServerExceptionFilter</span> <span class="token keyword">implements</span> <span class="token class-name">ExceptionFilter</span> <span class="token punctuation">{</span>
 	<span class="token function">catch</span><span class="token punctuation">(</span>exception<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> host<span class="token operator">:</span> ArgumentsHost<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 		<span class="token keyword">const</span> ctx <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">switchToHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 		<span class="token keyword">const</span> response <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">getResponse</span><span class="token generic class-name"><span class="token operator">&lt;</span>Response<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 		<span class="token keyword">const</span> request <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

 		response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 			code<span class="token operator">:</span> <span class="token number">9999</span><span class="token punctuation">,</span>
 			path<span class="token operator">:</span> request<span class="token punctuation">.</span>path<span class="token punctuation">,</span>
 			msg<span class="token operator">:</span> <span class="token string">&#39;\u670D\u52A1\u5668\u9519\u8BEF&#39;</span>
 		<span class="token punctuation">}</span><span class="token punctuation">)</span>
 	<span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="\u6743\u9650\u8BBE\u7F6E" tabindex="-1"><a class="header-anchor" href="#\u6743\u9650\u8BBE\u7F6E" aria-hidden="true">#</a> \u6743\u9650\u8BBE\u7F6E</h2><p>\u901A\u8FC7\u89E3\u6790\u8BF7\u6C42\u63A5\u53E3\u643A\u5E26\u7684HTTP\u8BF7\u6C42\u5934\u4E2D\u5305\u542B\u7684token\u89E3\u6790\u51FAtoken\u4FE1\u606F\u5B8C\u6210\u6743\u9650\u5904\u7406 <strong>\u793A\u4F8B\u4EE3\u7801</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthGuard</span> <span class="token keyword">implements</span> <span class="token class-name">CanActivate</span> <span class="token punctuation">{</span>
	<span class="token keyword">async</span> <span class="token function">canActivate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ExecutionContext<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token constant">NO_AUTH_TOKEN</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>

		<span class="token keyword">const</span> <span class="token punctuation">{</span> headers<span class="token punctuation">,</span> query <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">switchToHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">getRequest</span><span class="token generic class-name"><span class="token operator">&lt;</span>Request<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headers<span class="token punctuation">.</span>authorization<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadParamsException</span><span class="token punctuation">(</span><span class="token string">&#39;40008&#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">verifyToken</span><span class="token punctuation">(</span>headers<span class="token punctuation">.</span>authorization<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">{</span> uid<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> rid<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
			query<span class="token punctuation">[</span><span class="token constant">TOKEN_USER_ID</span><span class="token punctuation">]</span> <span class="token operator">=</span> payload<span class="token punctuation">.</span>uid
			query<span class="token punctuation">[</span><span class="token constant">TOKEN_ROLE_ID</span><span class="token punctuation">]</span> <span class="token operator">=</span> payload<span class="token punctuation">.</span>rid
			<span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token constant">NO_AUTH_API</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadParamsException</span><span class="token punctuation">(</span><span class="token string">&#39;401&#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token function">verifyToken</span><span class="token punctuation">(</span>token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> JwtSalt<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
					<span class="token function">resolve</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u65E5\u5FD7\u5904\u7406" tabindex="-1"><a class="header-anchor" href="#\u65E5\u5FD7\u5904\u7406" aria-hidden="true">#</a> \u65E5\u5FD7\u5904\u7406</h2><ol><li><p>\u8BBE\u7F6Elog4js</p><p><strong>\u793A\u4F8B\u4EE3\u7801</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code> log4js<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 	appenders<span class="token operator">:</span> <span class="token punctuation">{</span>
 		cheese<span class="token operator">:</span> <span class="token punctuation">{</span>
 			type<span class="token operator">:</span> <span class="token string">&#39;dateFile&#39;</span><span class="token punctuation">,</span>
 			filename<span class="token operator">:</span> <span class="token string">&#39;logs/application.log&#39;</span><span class="token punctuation">,</span>
 			encoding<span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span>
 			layout<span class="token operator">:</span> <span class="token punctuation">{</span>
 				type<span class="token operator">:</span> <span class="token string">&#39;pattern&#39;</span><span class="token punctuation">,</span>
 				pattern<span class="token operator">:</span> <span class="token string">&#39;{&quot;date&quot;:&quot;%d{yyyy/MM/dd-hh.mm.ss}&quot;,&quot;level&quot;:&quot;%p&quot;,&quot;host&quot;:&quot;%h&quot;,&quot;data&quot;:\\&#39;%m\\&#39;}&#39;</span>
 			<span class="token punctuation">}</span><span class="token punctuation">,</span>
 			pattern<span class="token operator">:</span> <span class="token string">&#39;yyyy-MM-dd&#39;</span><span class="token punctuation">,</span>
 			keepFileExt<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
 			alwaysIncludePattern<span class="token operator">:</span> <span class="token boolean">true</span>
 		<span class="token punctuation">}</span>
 	<span class="token punctuation">}</span><span class="token punctuation">,</span>
 	categories<span class="token operator">:</span> <span class="token punctuation">{</span>
 		<span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
 			appenders<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;cheese&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
 			level<span class="token operator">:</span> <span class="token string">&#39;debug&#39;</span>
 		<span class="token punctuation">}</span>
 	<span class="token punctuation">}</span><span class="token punctuation">,</span>
 	pm2<span class="token operator">:</span> <span class="token boolean">true</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u521B\u5EFAlog\u4E2D\u95F4\u4EF6</p><p><strong>\u793A\u4F8B\u4EE3\u7801</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code> <span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LoggerMiddleware</span> <span class="token keyword">implements</span> <span class="token class-name">NestMiddleware</span> <span class="token punctuation">{</span>
 	<span class="token function">use</span><span class="token punctuation">(</span>req<span class="token operator">:</span> Request<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">,</span> <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 		<span class="token keyword">const</span> <span class="token punctuation">{</span> path<span class="token punctuation">,</span> method<span class="token punctuation">,</span> body<span class="token punctuation">,</span> params<span class="token punctuation">,</span> ip <span class="token punctuation">}</span> <span class="token operator">=</span> req
 		<span class="token keyword">const</span> bodyStr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&#39;,body=&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
 		<span class="token keyword">const</span> paramsStr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&#39;,params=&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
 		logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ip=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ip<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,path=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,method=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>bodyStr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>paramsStr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
 		<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 	<span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,18),o=[e];function c(l,i){return s(),a("div",null,o)}var r=n(p,[["render",c],["__file","api.html.vue"]]);export{r as default};
